	/**
	 * Generic DMACU Implementation for the ARM PL080 DMA Controller.
	 *
	 * Copyright (c) 2019 Johannes Winter
	 *
	 * This file is licensed under the MIT License. See LICENSE in the root directory
	 * of the prohect for the license text.
	 */

	/* Emit a DMA descriptor for a byte copy operation */
	.macro Dma_ByteCopy dst, src, size, lli
	.long (\src)
	.long (\dst)
	.long (\lli)
	.long (0x0C000000 + \size)
	.endm
	
	/* Patch srcaddr[7:0] of the descriptor given by dst */
	.macro Dma_PatchSrcLo8 dst, src, lli	
	Dma_ByteCopy (\dst+0), (\src), 1, \lli
	.endm
	
	/* Patch srcaddr[15:8] of the descriptor given by dst */
	.macro Dma_PatchSrcHi8 dst, src, lli	
	Dma_ByteCopy (\dst+1), (\src), 1, \lli
	.endm
	
	/* Patch dstaddr[7:0] of the descriptor given by dst */
	.macro Dma_PatchDstLo8 dst, src, lli	
	Dma_ByteCopy (\dst+4), (\src), 1, \lli
	.endm

	/* Patch dstaddr[15:0] of the descriptor given by dst */
	.macro Dma_PatchDstHi8 dst, src, lli	
	Dma_ByteCopy (\dst+5), (\src), 1, \lli
	.endm

	/*
	 * Substitute a byte from src via the given sbox and store the result in dst
	 *
	 * Constraints:
	 *   sbox must be aligned to a 256-byte boundary for proper operation.
	 */
	.macro Dma_Sbox8 dst, src, sbox, lli
	// Step 1: Load the source byte from src and substitute it into the sbox address
	Dma_PatchSrcLo8 LDma_Sbox8_Lookup\@, \src, LDma_Sbox8_Lookup\@
	
	// Step 2: Read the byte from the (patched) sbox location and store to dst
LDma_Sbox8_Lookup\@:
	Dma_ByteCopy    \dst, \sbox, 1, \lli
	.endm
	
	/*
	 * Add two bytes from memory operands src1 and src2 and store the result in dst.
	 *
	 * This operation uses Lut_Temporary for processing
	 */
	.macro Dma_Add8 dst, src1, src2, lli
	// Step 1: Load source byte from src1 and patch it into the source address for loading the temporary LUT
	Dma_PatchSrcLo8 LDma_Add8_LoadTempLut\@, \src1, LDma_Add8_LoadTempLut\@

	// Step 2: Load the temporary LUT with with the identity LUT (offset by src1 memory operand)
LDma_Add8_LoadTempLut\@:
	Dma_ByteCopy    Lut_Temporary, Lut_Identity, 0x100, LDma_Add8_LookupSum\@

	// Step 3: Lookup the sum using the temporary LUT (indexed by src2 memory operand)
LDma_Add8_LookupSum\@:
	Dma_Sbox8       \dst, \src2, Lut_Temporary, \lli
	.endm

	/*
	 * Add 8-bit immediate imm8 to byte at memory operand src1 and store the result in dst.
	 *
	 * This operation uses Lut_Temporary for processing
	 */
	.macro Dma_Add8Imm dst, src1, imm8, lli	
	// Step 1: Load the temporary LUT with with the identity LUT offset by imm8 operand
	Dma_ByteCopy    Lut_Temporary, (Lut_Identity + \imm8), 0x100, LDma_Add8Imm_LookupSum\@

	// Step 3: Lookup the sum using the temporary LUT (indexed by src2 memory operand)
LDma_Add8Imm_LookupSum\@:
	Dma_Sbox8       \dst, \src1, Lut_Temporary, \lli
	.endm

	/*
	 * Add 8-bit immediate imm8 to byte at memory operand src1 and store the carry of the addition in dst.
	 *
	 * This operation uses Lut_Temporary for processing
	 */
	.macro Dma_CarryFromAdd8Imm dst, src1, imm8, lli	
	// Step 1: Load the temporary LUT with with the carry LUT offset by imm8 operand
	Dma_ByteCopy    Lut_Temporary, (Lut_Carry + \imm8), 0x100, LDma_CarryFromAdd8Imm_LookupCarry\@

	// Step 3: Lookup the carry using the temporary LUT (indexed by src2 memory operand)
LDma_CarryFromAdd8Imm_LookupCarry\@:
	Dma_Sbox8       \dst, \src1, Lut_Temporary, \lli
	.endm

	/*
	 * Subtract 8-bit immediate imm8 from byte at memory operand src1 and store the result in dst.
	 *
	 * This operation uses Lut_Temporary for processing
	 */
	.macro Dma_Sub8Imm dst, src1, imm8, lli	
	// Step 1: Load the temporary LUT with with the identity LUT (2nd copy) offset by imm8 operand
	Dma_ByteCopy    Lut_Temporary, (Lut_Identity2 - \imm8), 0x100, LDma_Sub8Imm_LookupSum\@

	// Step 3: Lookup the sum using the temporary LUT (indexed by src2 memory operand)
LDma_Sub8Imm_LookupSum\@:
	Dma_Sbox8       \dst, \src1, Lut_Temporary, \lli
	.endm

	/*
	 * Add 8-bit immediate imm8 to 16-bit value (little endian) at memory operand src1 and store the result in dst1
	 *
	 * This operation uses Lut_Temporary and Cpu_Scratchpad for processing
	 */
	.macro Dma_Add16Imm dst, src1, imm8, lli
	// Step 1: Generate the carry for the 8-bit addition in the lower byte and patch the 
	//   immediate of the upper part of the addition
	Dma_CarryFromAdd8Imm Cpu_Scratchpad, \src1, \imm8, LDma_Add16Imm_AddLo8\@

	// Step 2: Perform the 8-bit addition in the lower byte
LDma_Add16Imm_AddLo8\@:
	Dma_Add8Imm (\dst + 0), (\src1 + 0), \imm8, LDma_Add16Imm_AddHi8\@

	// Step 3: Perform the 8-bit addition in the upper byte (immediate is patched with the carry lookup value)
LDma_Add16Imm_AddHi8\@:
	Dma_Add8    (\dst + 1), (\src1 + 1), Cpu_Scratchpad, \lli
	.endm

	/**
	 * Workspace (bss-like)
	 */
	.section ".dmacu.bss", "aw", "nobits"
	
	// Temporary LUT / scratchpad memory
	.align 8
Lut_Temporary:
	.space 0x100, 0x00

	// Register file (240x 8-bit, last 16 bytes are used by Cpu_PC and Cpu_NextPC)
	.global Cpu_Regfile
	.align 2
Cpu_Regfile:
	.space 0x100, 0x00

	// Current program counter
	.global Cpu_PC
	.align 2
Cpu_PC:
	.long 0

	// Next program counter
	.global Cpu_NextPC
	.align 2
Cpu_NextPC:
	.long 0

	// Scratchpad for temporary values
Cpu_Scratchpad:
	.long 0

	/**
	 * S-Boxes / Lookup-Tables
	 *
	 * TODO: Check whether we can reduce table sizes here (at cost of higher execution time) by using a
	 * double-sized temp LUT (and by doing an in-place copy in the temp lut)
	 */
	.section ".dmacu.rodata", "a", "progbits"
	.align 16
Lut_Identity:
	/* Identity lookup table */
	.byte 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
	.byte 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f
	.byte 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f
	.byte 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f
	.byte 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f
	.byte 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f
	.byte 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f
	.byte 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f
	.byte 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f
	.byte 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f
	.byte 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf
	.byte 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf
	.byte 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf
	.byte 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf
	.byte 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef
	.byte 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff
	
	/* Identity lookup table (second copy) */
Lut_Identity2:
	.byte 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
	.byte 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f
	.byte 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f
	.byte 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f
	.byte 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f
	.byte 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f
	.byte 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f
	.byte 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f
	.byte 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f
	.byte 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f
	.byte 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf
	.byte 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf
	.byte 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf
	.byte 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf
	.byte 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef
	.byte 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff

	/*
	 * Carry LUT
	 *
	 */
Lut_Carry:
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

	.byte 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
	.byte 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
	.byte 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
	.byte 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
	.byte 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
	.byte 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
	.byte 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
	.byte 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
	.byte 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
	.byte 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
	.byte 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
	.byte 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
	.byte 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
	.byte 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
	.byte 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
	.byte 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01

Lit_5A: .byte 0x5A
Lit_A5: .byte 0xA5

	/**
	 * WIP: Test code
	 */
	.section ".dmacu.ucode", "aw", "progbits"
	.global Dma_UCode_Start
	.global Dma_UCode_End
Dma_UCode_Start:
	Dma_Add8     (Cpu_Regfile+0), (Cpu_Regfile+0), Lit_5A, 1f
1:	Dma_ByteCopy (Cpu_Regfile+1), Lit_A5, 1, 1f
1:	Dma_Sbox8    (Cpu_Regfile+2), (Cpu_Regfile+0), Lut_Identity, 1f
1:  Dma_Add8     (Cpu_Regfile+3), (Cpu_Regfile+1), (Cpu_Regfile+2), 1f
1:  Dma_Sub8Imm  (Cpu_Regfile+4), (Cpu_Regfile+3), 0xC0, 1f
1:  Dma_Sub8Imm  (Cpu_Regfile+4), (Cpu_Regfile+4), 0x03, 1f
1:  Dma_Add8Imm  (Cpu_Regfile+4), (Cpu_Regfile+4), 0x01, 1f
1:  Dma_Add8Imm  (Cpu_Regfile+4), (Cpu_Regfile+4), 0x10, 1f
1:  Dma_CarryFromAdd8Imm (Cpu_Regfile + 5), (Cpu_Regfile + 3), 0x0, 1f
1:  Dma_CarryFromAdd8Imm (Cpu_Regfile + 6), (Cpu_Regfile + 3), 0x3, 1f
1:  Dma_Add16Imm (Cpu_Regfile+16), (Cpu_Regfile+0), 0xC0, 0
Dma_UCode_End:
